<log-in class={"auth-page"}>
  <div class="container page">
    <div class="row">
      <div class="col-md-6 offset-md-3 col-xs-12">
        <h1 class="text-xs-center">
            { props.action === 'sign-up' ? 'Sign up' : 'Sign in' } {user && user.data && user.data.email || 123 }
        </h1>
        <p class="text-xs-center">
          <a if={props.action === 'sign-up'} is="navigationlink" href="/sign-in">Have an account?</a>
          <a if={props.action === 'sign-in'} is="navigationlink" href="/sign-up">Need an account?</a>
        </p>
        <ul is="errorslist" if={user && user.error} error={user && user.error} />
        <form onsubmit={this.onsubmit}>
          <fieldset  if={props.action === 'sign-up'} class="form-group">
            <input
              class="form-control form-control-lg"
              type="text"
              placeholder="Your Name"
              autoComplete="off"
              name="name"
            />
          </fieldset>
          <fieldset class="form-group" >
            <input
              class="form-control form-control-lg"
              type="text"
              placeholder="Email"
              autoComplete="off"
              name="email"
            />
          </fieldset>
          <fieldset class="form-group">
            <input
              class="form-control form-control-lg"
              type="password"
              placeholder="Password"
              autoComplete="off"
              name="password"
            />
          </fieldset>
          <button class="btn btn-lg btn-primary pull-xs-right">
            { props.action === 'sign-up' ? 'Sign up' : 'Sign in' }
          </button>
        </form>
      </div>
    </div>
  </div>
  <script>
    let isFirstLoad = true
    import Navigationlink from '../navigationLink.riot';
    import Errorslist from '../components/errorsList.riot';
    export default {
      get user() {
        try {
          return this.userStore.state;
        } catch (ex) {
        }
      },
      get userStore() {
        try {
          return this.props.store.userStore;
        } catch (ex) {
        }
      },
      components: {
        Navigationlink,
        Errorslist
      },
      async onsubmit(e) {
        e.preventDefault();
        alert(e.target.name.value)
        const email = e.target.email.value
        const password = e.target.password.value
        await this.userStore.login({ email, password})
        this.update()
      }
    }
  </script>
</log-in>
