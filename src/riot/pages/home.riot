<home-page>
  <div class="home-page">
    <div class="banner">
      <div class="container">
        <h1 class="logo-font">conduit</h1>
        <p class="test">A place to share your knowledge.</p>
      </div>
    </div>
    <div class="container page">
      <div class="row">
        <div class="col-md-9">
          <div class="feed-toggle">
            <ul class="nav nav-pills outline-active">
              <li is="navigationitem" to="/feed">Your Feed</li>
              <li is="navigationitem" to="/">Global Feed</li>
              <li if={this.currentTag} class={ 'nav-item'  + ('/' + props.action === props.to ? ' active' : '') }>
                <a
                  is='navigationlink'
                  class='nav-link'
                  href={ props.to }
                >
                  #{this.currentTag}
                </a>
              </li>
            </ul>
          </div>
          <div if={articles} each={article in articles} is="articlepreview" article={article} />
          <div is="pagination"  />
        </div>
        <div class="col-md-3">
          <div class="sidebar">
            <p>Popular Tags</p>
            <div class="tag-list">
              <a if={tags}
                each={tag in tags}
                is="navigationlink"
                href={`/tags/${tag}`}
                class="tag-pill tag-default"
                key={tag}
              >
                #{tag}
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    //import { me } from '../../redux/services/user';
    //import { feed, tags } from '../../redux/services/articles';
    import Articlepreview from '../components/articlePreview.riot';
    import Navigationitem from '../components/navigationItem.riot';
    //import Pagination from '../components/pagination.riot';
    import Navigationlink from '../navigationLink.riot';
    export default {
      get articles() {
        try {
          return this.articlesStore.store.articles;
        } catch (ex) {
        }
      },
      get tags() {
        try {
          return this.articlesStore.store.tags;
        } catch (ex) {
        }
      },
      get articlesStore() {
        try {
          return this.props.store.articlesStore;
        } catch (ex) {
        }
      },
      get currentTag() {
      console.log('currentTag', this)
        try {
          return this.state.req.params.tag
        } catch (ex) {
        }
        try {
          return this.props.req.params.tag
        } catch (ex) {
        }
      }
      components: {
        Articlepreview,
        Navigationitem,
        //Pagination,
        Navigationlink,
      },
      onMounted(state, props) {
        console.log('mounted with state', state)
        console.log('mounted with props', props)
      },
      onUpdated(state, props) {
        console.log('updated with state', state)
        console.log('updated with props', props)
      },
      async init(route) {
        console.log('route', route)
        await route.store.articlesStore.getTags({});
        await route.store.articlesStore.feed({});
        /*const page = Number(match.params.page) || 1;
        let filter;
        let value;
        if (req && !user) {
          promises.unshift(dispatch(me({ req })));
        }
        if (match.path.slice(0, 5) === '/feed') {
          if (req && !req.signedCookies.token) {
            return { redirectUrl: '/' };
          }
          filter = 'feed';
        } else if (match.params.tag) {
          filter = 'tag';
          value = match.params.tag;
        } else {
          filter = undefined;
        }
        promises.push(dispatch(feed({ req, filter, value, page })));
        promises.push(dispatch(tags({ req })));
        return Promise.all(promises);*/
      }
    }
  </script>
</home-page>
